#+TITLE: Emacs Configuration
#+AUTHOR: Ahmadou H. Dicko
#+EMAIL: dicko.ahmadou@gmail.com

* Personal info and package source
** Personal information

   #+begin_src emacs-lisp :tangle yes
(setq user-full-name "Ahmadou H. Dicko"
      user-mail-address "dicko.ahmadou at gmail dot com")
   #+end_src

** Customized stuff
   #+begin_src emacs-lisp :tangle yes
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
   #+end_src

** Add custom lisp path
   #+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'load-path "~/.emacs.d/lisp")
   #+end_src

** Some useful shortcut
   #+begin_src emacs-lisp :tangle yes
(defun emacs-d (filename)
  "Expand FILENAME relative to `user-emacs-directory'."
  (expand-file-name filename user-emacs-directory))
   #+end_src

** Add package sources
   #+begin_src emacs-lisp :tangle yes
   (require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))
(package-initialize)
   #+end_src

** Use package
   #+begin_src emacs-lisp :tangle yes
     ;; Bootstrap `use-package'
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
  #+end_src

** Clean .emacs.d
#+begin_src emacs-lisp :tangle no
  (use-package no-littering               ; Keep .emacs.d clean
    :ensure t
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))   
#+end_src


* Theme and visual aspect
** Remove all clutter
   #+BEGIN_SRC emacs-lisp :tangle yes
(menu-bar-mode -1)
(tooltip-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(fringe-mode -1)
(setq inhibit-splash-screen t)
(setq ad-redefinition-action 'accept)
   #+END_SRC

** Moe theme
   #+begin_src emacs-lisp :tangle yes
     (use-package moe-theme
       :ensure t
       :config
       (setq moe-theme-highlight-buffer-id t)
       (moe-dark
))
   #+end_src
** Smart mode line and powerline
*** Linum 
    #+begin_src emacs-lisp :tangle yes
(use-package linum
 :config
  (global-linum-mode t)
  (setq-default truncate-lines t))
    #+end_src

*** Hlinum
    #+begin_src emacs-lisp :tangle yes
(use-package hlinum
  :ensure t
  :config
  (hlinum-activate))
    #+end_src

*** Smart mode line
    #+begin_src emacs-lisp :tangle no
(use-package smart-mode-line
  :ensure t
  :defer t
  :config
  (setq sml/theme 'powerline)
  (sml/setup))
    #+end_src

*** Prettify everythings
    #+begin_src emacs-lisp :tangle yes
(global-prettify-symbols-mode 1)
    #+end_src

*** Powerline
    #+begin_src emacs-lisp :tangle yes
(use-package powerline
  :ensure t
  :config
  (powerline-moe-theme))
    #+end_src

** Smartparens
   #+begin_src emacs-lisp :tangle yes
(use-package smartparens-config
  :ensure smartparens
  :config
  (show-smartparens-global-mode t)
  (add-hook 'prog-mode-hook 'turn-on-smartparens-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-smartparens-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-mode)
  (add-hook 'ess-mode-hook 'turn-on-smartparens-mode)
  (add-hook 'org-mode-hook 'turn-on-smartparens-mode))
   #+end_src

** Icons
*** Mode-icons
    #+begin_src emacs-lisp :tangle yes
     (use-package mode-icons                 
      :config
      (progn
        (mode-icons-mode)))
    #+end_src

*** All-the-icons
    #+begin_src emacs-lisp :tangle yes
      (use-package all-the-icons
        :config
        (setq all-the-icons-color-icons t)
        (setq all-the-icons-for-buffer t)
	(add-hook 'dired-mode-hook 'all-the-icons-dired-mode))                 
    #+end_src

** Neotree 
   #+begin_src emacs-lisp :tangle yes
     (use-package neotree                 
      :config
      (progn
      (global-set-key [f8] 'neotree-toggle)
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow))))
   #+end_src

** Autocomplete
   #+begin_src emacs-lisp :tangle yes
  (use-package auto-complete
    :ensure t
    :config
    (progn
      (use-package auto-complete-config)
      (ac-config-default)
      (define-key ac-completing-map (kbd "M-h") 'ac-quick-help)
      (global-auto-complete-mode t)))  
   #+end_src
** Ido
   #+begin_src emacs-lisp :tangle yes
(use-package ido
  :init
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
  (use-package ido-vertical-mode
    :ensure t
    :init (ido-vertical-mode 1)))
   #+end_src

** Brower
#+begin_src emacs-lisp :tangle yes
(setq browse-url-browser-function 'browse-url-chromium)
#+end_src

* Data science tools
** Clojure
*** Clojure mode
    #+begin_src emacs-lisp :tangle no
(use-package clojure-mode
  :ensure t
  :defer t
  :init
  (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljx\\'" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs$" . clojure-mode)))
    #+end_src

*** CIDER
    #+begin_src emacs-lisp :tangle no
(use-package cider
  :ensure t
  :defer t
  :config
  (setq nrepl-hide-special-buffers t
        nrepl-popup-stacktraces-in-repl t
        cider-mode-line " CIDER"
        cider-repl-display-in-current-window t
        cider-auto-select-error-buffer nil
        cider-repl-pop-to-buffer-on-connect nil
        cider-show-error-buffer nil)
  (defun cider-use-repl-tools ()
    (interactive)
    (cider-interactive-eval
     "(use 'clojure.repl)"))

  (bind-keys :map cider-repl-mode-map
             ("M-r" . cider-refresh)
             ("M-R" . cider-use-repl-tools)))
    #+end_src

** Scala
*** Ensime
    #+begin_src emacs-lisp :tangle no
(use-package ensime
  :commands ensime ensime-mode)
(add-hook 'scala-mode-hook 'ensime-mode)
    #+end_src

** ESS (R, Julia)
   #+begin_src emacs-lisp :tangle yes
     (use-package ess
       :ensure t                             
       :init (require 'ess-site)                     
       :config
       (progn
	 (setq
	  inferior-ess-same-window nil       
	  ess-ask-for-ess-directory nil      ; don't ask wkd
	  inferior-R-args "--quiet --no-save" ; no save
	  ess-swv-processor (quote knitr)    ; Use knitr instead of Sweave as ESS processor
	  ess-default-style 'RStudio)
	 (setq prettify-symbols-alist '(("lambda" . 955)))
	 (add-hook 'ess-mode-hook
		   (lambda ()
		     (setq mode-require-final-newline nil)
		     (setq mode-require-final-newline nil)))
	 (add-hook 'ess-mode-hook 'projectile-mode)
	 (add-hook 'ess-mode-hook 'flycheck-mode) ;; doesn't like flymakeP
	 (add-hook 'ess-help-mode-hook '(lambda ()
					  (when (string= ess-dialect "R")
					    (poly-ess-help+r-mode))))
	 (add-hook 'ess-R-post-run-hook 'smartparens-mode)
	 (add-hook 'iESS-mode-hook 'ansi-color-for-comint-mode-on)
	 ;; add pipe shortcut
	 (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)))
   #+end_src

** Python
*** Python mode customization
    #+begin_src emacs-lisp :tangle yes
      (setq python-shell-interpreter "ipython" 
            python-shell-interpreter-args "-i --simple-prompt --pprint")
      (add-hook 'python-mode-hook 'elpy-mode)
    #+end_src

*** Elpy mode
    #+begin_src emacs-lisp :tangle yes
     (use-package elpy
       :ensure t
       :defer 2
       :config
       (remove-hook 'elpy-modules 'elpy-module-flymake)
       (remove-hook 'elpy-modules 'elpy-module-yasnippet)
       (define-key elpy-mode-map (kbd "C-c C-j") 'elpy-shell-send-statement)
       (define-key elpy-mode-map (kbd "C-c C-n") 'elpy-shell-send-statement-and-step)
       (define-key elpy-mode-map (kbd "C-c C-v") 'elpy-doc)
       (elpy-enable))
    #+end_src

** Javascript
    #+begin_src emacs-lisp :tangle no
(use-package indium)
    #+end_src

* Literal programming tools
** Org-mode
   #+begin_src emacs-lisp :tangle yes
     (use-package org
       :mode (("\\.org$" . org-mode))
       :ensure org-plus-contrib
       :config
       (progn
         (setq org-latex-default-packages-alist
               '(("" "fontspec" t)
                 ("" "xltxtra" t)
                 ("" "xunicode" t)
                 ("" "url" t)
                 ("" "booktabs" t)
      		 ("" "minted" t)
                 ("" "hyperref" nil)))
         (setq org-latex-pdf-process
   	    '("latexmk -pdflatex='xelatex -shell-escape -interaction nonstopmode' -pdf -f %f"))
         (setq org-src-fontify-natively t)
         (setq org-odt-preferred-output-format "docx")
         (setq org-latex-listings 'minted)
         (setq org-latex-minted-options
   	    '(("frame" "lines")
   	      ("fontsize" "\\footnotesize")))
         (setq org-latex-custom-lang-environments
   	    '((R "rcode")))
         (org-babel-do-load-languages
          'org-babel-load-languages
          '((emacs-lisp . t)
   	 (latex . t)
   	 (shell . t)
   	 (sql . t)
   	 (julia . t)
   	 (python . t)    
   	 (ipython . t)  
	 (js . t)    
   	 (R . t))))
       (add-hook 'org-mode-hook
   	      (lambda ()
   		(push '("+begin_src" . ?¦) prettify-symbols-alist)
   		(push '("+end_src" . ?¦) prettify-symbols-alist)
   		(push '("+BEGIN_SRC" . ?¦) prettify-symbols-alist)
   		(push '("+END_SRC" . ?¦) prettify-symbols-alist)))
       (setq org-confirm-babel-evaluate nil)
       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
       (add-hook 'org-mode-hook 'org-display-inline-images))
   #+end_src

*** Org reveal
    #+begin_src emacs-lisp :tangle yes
      (require 'ox-reveal)
    #+end_src

*** Org-ravel
    #+begin_src emacs-lisp :tangle no
(load-library "ox-ravel.el")
(require 'ox-ravel)
    #+end_src

** LateX
   #+begin_src emacs-lisp :tangle yes
     (use-package tex-site                   ; AUCTeX
       :ensure auctex                        ; Check and install if necessary
       :config 
       (progn
	 (setq
	  TeX-parse-self t                   ; Enable parse on load.
	  TeX-auto-save nil                  ; Do not use folder 'auto' 
	  TeX-auto-global nil                ;   (useful in case of a master)
	  TeX-PDF-mode t                     ; Compile as PDF
	  TeX-show-compilation t             ; Show compilation buffer
	  TeX-source-correlate-mode t)    
	  (add-hook 'LaTeX-mode-hook 
		    (lambda ()
		      (LaTeX-math-mode)       ; math mode
		      (flyspell-mode)         ; Flyspell checking
		      (setq 
		       TeX-clean-confirm nil ; Clean up intermediary files without confirm
		       TeX-command-default "LatexMk"))))
       (use-package auto-complete-auctex     ; AUCTeX completions using auto-complete.el
	 :ensure t)                          ; Check and install if necessary
       (use-package auctex-latexmk           ; Integration of LaTeXmk                       
	 :ensure t                           ; Check and install if necessary
	 :config
	 (progn
	   (require 'auctex-latexmk)         ; Load LaTeXmk
	   (auctex-latexmk-setup))))         ; Enable --pvc mode for continuous compilation
   #+end_src

** Markdown
   #+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
   #+end_src

** Polymode
   #+begin_src emacs-lisp :tangle yes
     (use-package polymode           ; ESS with polymode
       :ensure t                         ; https://github.com/vitoshka/polymode
       :config
       (progn
	 (require 'poly-R)               
	 (require 'poly-markdown)
	 (require 'poly-noweb)
	 ;; (setq polymode-exporter-output-file-format "%s")
	 ;; Add shortcut to add snippet ```{r} ```
	 (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode)) ; Markdown files
	 (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
	 (add-to-list 'auto-mode-alist '("\\.Rmarkdown" . poly-markdown+r-mode))
	 (add-to-list 'auto-mode-alist '("\\.Rpres" . poly-markdown+r-mode))
	 (add-to-list 'auto-mode-alist '("\\.Snw" . poly-noweb+r-mode)) ; Sweave files
	 (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode)) ; Sweave files
	 (add-to-list 'auto-mode-alist '("\\.Rd" . poly-ess-help+r-mode))))
   #+end_src

* Other tools 
** Magit
   #+begin_src emacs-lisp :tangle yes
(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
   #+end_src

** Projectile
   #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package projectile
      :ensure t
      :defer t)
   #+end_src

** Mu4e
   #+begin_src emacs-lisp :tangle no
     (use-package mu4e
       :init
       (progn
         (use-package mu4e-contrib)
         (use-package gnus-dired)
         (use-package smtpmail)
         (setq mu4e-maildir "~/.mail/gmail")
         (setq mu4e-drafts-folder "/Drafts")
         (setq mu4e-sent-folder   "/Sent")
         (setq mu4e-trash-folder  "/Trash")
         (setq mu4e-maildir-shortcuts
               '( ("/Inbox"             . ?i)
                  ("/Sent"              . ?s)
                  ("/Drafts"            . ?d)
                  ("/Trash"             . ?t)))
         (setq mu4e-change-filenames-when-moving t)
         (setq mu4e-get-mail-command "mbsync -a")
         (setq mu4e-show-images t)
         (setq mu4e-html2text-command 'mu4e-shr2text)
         (setq mu4e-update-interval 900)
         (setq mu4e-attachment-dir "~/Downloads")
         (setq
          mu4e-reply-to-address "dicko.ahmadou@gmail.com"
          user-mail-address "dicko.ahmadou@gmail.com"
          user-full-name  "Ahmadou H. Dicko"
          mu4e-compose-signature
          (concat
           "Ahmadou H. Dicko, PhD\n"
           "Statistical consultant\n"
           "Stat4D\n"))
           ;;send mail using postfix
           ;; (setq send-mail-function 'sendmail-send-it)
           ;; (setq message-send-mail-function 'message-send-mail-with-sendmail)
           (setq message-send-mail-function 'smtpmail-send-it
           smtpmail-stream-type 'starttls
           smtpmail-default-smtp-server "smtp.gmail.com"
           smtpmail-smtp-server "smtp.gmail.com"
           smtpmail-smtp-service 587)
         (setq message-kill-buffer-on-exit t)
         (setq mu4e-confirm-quit nil)
         ;; make the `gnus-dired-mail-buffers' function also work on
         ;; message-mode derived modes, such as mu4e-compose-mode
         (defun gnus-dired-mail-buffers ()
           "Return a list of active message buffers."
           (let (buffers)
         (save-current-buffer
           (dolist (buffer (buffer-list t))
             (set-buffer buffer)
             (when (and (derived-mode-p 'message-mode)
                        (null message-sent-message-via))
               (push (buffer-name buffer) buffers))))
         (nreverse buffers)))
         (setq gnus-dired-mail-mode 'mu4e-user-agent)
         (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)))
   #+end_src

** Eww
   #+begin_src emacs-lisp :tangle no
  (use-package eww-lnum
    :ensure t
    :init
    (eval-after-load "eww"
      '(progn (define-key eww-mode-map "f" 'eww-lnum-follow)
              (define-key eww-mode-map "F" 'eww-lnum-universal)))
    :config
    (setq browse-url-browser-function 'eww-browse-url))

   #+end_src
** Tramp
   #+begin_src emacs-lisp :tangle yes
(setq tramp-default-method "ssh")
   #+end_src

** PDF tools
#+begin_src emacs-lisp :tangle no
(use-package pdf-tools
 :pin manual ;; manually update
 :config
 ;; open pdfs scaled to fit page
 (setq-default pdf-view-display-size 'fit-page)
 ;; automatically annotate highlights
 (setq pdf-annot-activate-created-annotations t)
 ;; use normal isearch
 (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
 ;; turn off cua so copy works
 (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
 ;; more fine-grained zooming
 (setq pdf-view-resize-factor 1.1)
 ;; keyboard shortcuts
 (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
 (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
 (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))
#+end_src
